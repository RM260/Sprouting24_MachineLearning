# -*- coding: utf-8 -*-
"""Model Training and Validation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SYoe-JScMsFrir5Xx5UKiQBEonr1NDSN

#Model Training and Validation with California Census Data
"""

import numpy as np # a package for manipulating numbers and using arrays
import pandas as pd

import matplotlib.pyplot as plt # a package with plotting capabilities
import seaborn as sns # a package for data visualization

from sklearn.linear_model import LinearRegression # a package with an optimized LinearRegression class
from sklearn.linear_model import Ridge, Lasso, ElasticNet

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler

from sklearn.datasets import fetch_california_housing

california_housing = fetch_california_housing(as_frame=True)
california_housing_df = california_housing.frame

"""## Explore and Understand the California Housing Dataset"""

print(california_housing.DESCR)

california_housing_df.rename(columns={'Longitude': 'longitude'}, inplace=True)
california_housing_df.rename(columns={'Latitude': 'latitude'}, inplace=True)
california_housing_df.rename(columns={'HouseAge': 'housing_median_age'}, inplace=True)
california_housing_df.rename(columns={'AveRooms': 'total_rooms'}, inplace=True)
california_housing_df.rename(columns={'AveBedrms': 'total_bedrooms'}, inplace=True)
california_housing_df.rename(columns={'Population': 'population'}, inplace=True)
california_housing_df.rename(columns={'AveOccup': 'households'}, inplace=True)
california_housing_df.rename(columns={'MedInc': 'median_income'}, inplace=True)
california_housing_df.rename(columns={'MedHouseVal': 'median_house_value'}, inplace=True)

"""### Explore and Understand the California Housing Dataset

Explore a pandas dataframe version of the data
"""

california_housing_df.head()

california_housing_df.describe()

"""## Instantiate a Linear Regression Class and Fit a Linear Model

### Build and Analyze a Linear Regression Model

Select features from the California housing dataset and use them to build a linear regression model to predict the median house value.

1. **Create and Train the Linear Regression Model**
2. **Print Model Parameters**
"""

# Select features and target variable
x = california_housing.data # Select features from the dataset
y = california_housing_df['median_house_value']  # Select target variable from the dataset

# Create and Train the Linear Regression Model
model = LinearRegression()
model.fit(x, y)

# Print model parameters (coefficients and intercept)
print("Model Intercept:", model.intercept_)
print("Model Coefficients:", model.coef_)

"""## What is Trained in a Linear Regression?"""

# Assuming the feature names are stored in a list or array called feature_names
# Replace 'feature_names' with the actual list of names if it’s defined elsewhere in your code
feature_names = x.columns if hasattr(x, 'columns') else [f'Feature {i+1}' for i in range(len(model.coef_))]

# Create a bar plot of the feature coefficients
plt.barh(feature_names, model.coef_, color='purple')
plt.xlabel('Median House Value')
plt.ylabel('Features')
plt.title('Features vs House Value')
plt.tight_layout()
plt.show()

"""## Evaluate your Model

### Evaluate the Model

1. **Calculate the R² Score**  
2. **Calculate the Mean Squared Error (MSE)**  

Reflect on these metrics to gauge the model’s performance.
"""

# Evaluate the Model -----------------------------------------------------------

# Calculate R^2 score
r_sq = model.score(x,y)  # Calculate R^2 score
print('R^2:', r_sq)

# Calculate Mean Squared Error
mse_train = mean_squared_error( y, model.predict(x))  # Calculate MSE for the training set
print('Training set MSE:', mse_train)

"""## Visualize the Fit

### Visualize the Linear Regression Model's Predictions

Create a scatter plot to compare the model’s predictions against the actual values. This visualization will help you understand how well the model fits the data.

1. **Generate Predictions**
2. **Create the Scatter Plot**
"""

# Visualize the Results --------------------------------------------------------
# You cannot directly plot high-dimensional data, but we can visualize the predictions

# Use the trained model to predict outputs
y_pred = model.predict(x)

# Plot the true vs. predicted values for the test set with enhancements
plt.style.use('seaborn-v0_8-darkgrid')  # Switch to a cleaner, modern style
plt.figure(figsize=(10, 6))

# Scatter plot for the true vs predicted values with larger markers
plt.scatter(y, y_pred, color='blue', edgecolor='k', alpha=0.7, s=60, label='Predicted vs Actual')

# Add the ideal fit line
plt.plot([min(y), max(y)], [min(y), max(y)], 'r--', lw=3, label='Ideal Fit')

# Add gridlines for better readability
plt.grid(True)

# Enhanced labels and title with increased font size and clarity
plt.xlabel('True Median House Value [US$/1000]', fontsize=14)
plt.ylabel('Predicted Median House Value [US$/1000]', fontsize=14)
plt.title('Linear Regression: True vs Predicted', fontsize=16, fontweight='bold')

# Customize the legend for better readability
plt.legend(loc='upper left', fontsize=12)

# Adjust layout for a cleaner appearance
plt.tight_layout()

# Show the plot
plt.show()